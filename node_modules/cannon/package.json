{
  "name": "cannon",
  "version": "0.5.0",
  "description": "A lightweight 3D physics engine written in JavaScript. Perfect to use with three.js, for example.",
  "homepage": "https://github.com/schteppe/cannon.js",
  "author": {
    "name": "Stefan Hedman",
    "email": "schteppe@gmail.com",
    "url": "http://steffe.se"
  },
  "keywords": [
    "cannon.js",
    "cannon",
    "physics",
    "engine",
    "3d"
  ],
  "main": "./build/cannon.js",
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/schteppe/cannon.js.git"
  },
  "bugs": {
    "url": "https://github.com/schteppe/cannon.js/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "jshint": "latest",
    "uglify-js": "latest",
    "nodeunit": "latest",
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-uglify": "*"
  },
  "dependencies": {},
  "readme": "# cannon.js\n\n### Lightweight 3D physics for the web\nInspired by [three.js](https://github.com/mrdoob/three.js) and [ammo.js](https://github.com/kripken/ammo.js), and driven by the fact that the web lacks a physics engine, here comes cannon.js.\n\n[Demos](http://schteppe.github.com/cannon.js) - [Documentation](http://schteppe.github.com/cannon.js/doc/) - [Rendering hints](https://github.com/schteppe/cannon.js/tree/master/examples) - [NPM package](https://npmjs.org/package/cannon)\n\n### Usage \nDownload [the library](https://raw.github.com/schteppe/cannon.js/master/build/cannon.js) and include it in your html. Alternatively, build the library yourself (see [Makefile](https://github.com/schteppe/cannon.js/blob/master/Makefile)).\n\n```html\n<script src=\"cannon.js\"></script>\n```\n\nThe code below creates a sphere on a plane, steps the simulation, and prints the sphere simulation to the console.\n\n```javascript\n// Setup our world\nvar world = new CANNON.World();\nworld.gravity.set(0,0,-9.82);\nworld.broadphase = new CANNON.NaiveBroadphase();\n    \n// Create a sphere\nvar mass = 5, radius = 1;\nvar sphereShape = new CANNON.Sphere(radius);\nvar sphereBody = new CANNON.RigidBody(mass,sphereShape);\nsphereBody.position.set(0,0,10);\nworld.add(sphereBody);\n    \n// Create a plane\nvar groundShape = new CANNON.Plane();\nvar groundBody = new CANNON.RigidBody(0,groundShape);\nworld.add(groundBody);\n    \n// Step the simulation\nsetInterval(function(){\n  world.step(1.0/60.0);\n  console.log(\"Sphere z position: \" + sphereBody.position.z);\n}, 1000.0/60.0);\n```\n\nIf you want to know how to use cannon.js with a rendering engine, for example Three.js, see the [Examples](https://github.com/schteppe/cannon.js/tree/master/examples).\n\n### Supported contact shape pairs\n|           | Sphere | Plane | Box | Compound | Convex¹ | Particle |\n| :-------: |:------:|:-----:|:---:|:--------:|:-------:|:--------:|\n| Sphere    | Yes    | Yes   | Yes | Yes      | Yes     | Yes      |\n| Plane     | -      | -     | Yes | Yes      | Yes     | Yes      |\n| Box       | -      | -     | Yes | Yes      | Yes     | Yes      |\n| Compound  | -      | -     | -   | Yes      | Yes     | Yes      |\n| Convex¹   | -      | -     | -   | -        | Yes     | Yes      |\n| Particle  | -      | -     | -   | -        | -       | -        |\n\n¹ including Cylinder\n\n### Change log\n**0.6.0**\n * Renamed ```RigidBody.calculateAABB``` to ```.computeAABB```. Added ```RigidBody.aabbNeedsUpdate```.\n * Added ```Broadphase.useBoundingBoxes```, ```.doBoundingBoxBroadphase``` and ```.intersectionTest```.\n * ```ConvexPolyhedron``` constructor now calculates normals instead of taking them as a parameter.\n * Added ```Body.collisionFilterGroup``` and ```Body.collisionFilterMask```.\n * Added ```GridBroadphase```, though it only supports ```Plane``` and ```Sphere``` for now.\n * Removed World.temp.\n * Reuse of various event objects to minimize object creation in the step loop.\n * Removed unused class ```ContactPoint```.\n * Changed the signature of ```Broadphase.collisionPairs``` to ```Broadphase.collisionPairs(world,pairs1,pairs2)```, removing the need of an array return value.\n\n**0.5.0**\n * Changed unit of sleep properties in ```Particle``` to seconds instead of milliseconds, made ```Particle.sleepState``` public. (schteppe,airbaggins).\n * Changed property ```Shape.boundingSphereRadius``` to being a number, added method ```Shape.computeBoundingSphereRadius``` and ```.boundingSphereRadiusNeedsUpdate```\n * Removed ```Box.getCorners```\n * Added properties to ```ContactMaterial```:  ```.contactEquationStiffness```, ```.contactEquationRegularizationTime```, ```.frictionEquationStiffness```, ```.frictionEquationRegularizationTime``` to be able to control settings for the on-the-fly created contact constraints\n * Renamed the solver parameter \"damping\" to \"regularizationTime\", since it is a more correct name.\n * Solver parameters (stiffness, damping etc) were moved from ```Solver``` to ```Equation```. Now you control the solver parameters per constraint instead of globally.\n * Added ```HingeConstraint``` and its ```Constraint``` base class\n * Added contact support for all possible ```Shape.types``` (see table above).\n * Fixed convex contact bugs.\n * Added method ```ConvexPolyhedron.getAveragePointLocal```.\n * Added method ```ConvexPolyhedron.transformAllPoints```.\n * Added ```SplitSolver```.\n * Removed use of typed arrays, since they are slower than ordinary ones.   \n * Corrected applying of linear and angular damping, should now be physically correct and independent of timestep size.\n * Renamed ```Solver``` to ```GSSolver```, made ```Solver``` a base class instead.\n * Added method ```Mat3.setTrace```\n * ```ContactGenerator``` now produces ```ContactEquation``` instead of ```ContactPoint```\n * Added property ```Solver.tolerance```\n * Changed default ```Solver``` parameter values\n * Improved ```Solver``` algorithm, the parameters ```.a```, ```.b```, ```.k```, ```.d```, ```.eps``` do not have the same effect anymore.\n * Rewrote ```Solver```, ```Equation``` and ```Constraint``` totally, broke backward compatibility.\n * Added property ```World.enableImpulses``` - still an experimental feature\n * Added ```PointToPointConstraint```\n * Added ```Cylinder```.\n * Added method ```RigidBody.applyImpulse```\n * Added \"iterator\" method ```Box.forEachWorldCorner```\n * Added \"abstract method\" ```Shape.calculateWorldAABB``` and implemented it in subclasses.\n * Removed ```Plane.normal``` in favor of ```RigidBody.quaternion```. One way to rotate a plane is enough.\n\n**0.4.3**\n * ```World``` now dispatches \"preStep\" and \"postStep\" events.\n * Introduced ```Body``` and ```Particle```. New inheritance: ```Body``` -> ```Particle``` -> ```RigidBody```.\n * Added ```Quaternion.toAxisAngle()```\n * Added ```Ray```. Basic hit testing for ```ConvexPolyhedra```.\n * ```RigidBody``` now dispatches the following events: ```\"collide\"```, ```\"sleep\"```, ```\"sleepy\"```, ```\"wakeup\"```\n * Added ```Solver.setSpookParams(k,d)``` and removed SPOOK param things from ```World```.\n * Sleep functionality for ```RigidBody```\n\n**0.4.2** 2012-08-06\n * Code seem stable enough to start a change log.\n\n### Todo\nThe simpler todos are marked with ```@todo``` in the code. Github Issues can and should also be used for todos.\n\n### Help\nCreate an issue on here if you need help.\n",
  "readmeFilename": "README.markdown",
  "_id": "cannon@0.5.0",
  "dist": {
    "shasum": "aebdacb35819ef1dccb4746764c6ecd33b9cc9d8"
  },
  "_resolved": "git://github.com/schteppe/cannon.js.git#952a104242546111ad79638736aedbaf4658c581",
  "_from": "cannon@git://github.com/schteppe/cannon.js.git#dev"
}
