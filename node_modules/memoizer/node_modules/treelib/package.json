{
  "author": {
    "name": "David Wee",
    "email": "rook2pawn@gmail.com",
    "url": "http://rook2pawn.com"
  },
  "name": "treelib",
  "description": "create trees as simple as path('a/b/c')!",
  "version": "0.0.4",
  "homepage": "https://github.com/rook2pawn/node-treelib",
  "repository": {
    "type": "git",
    "url": "git://github.com/rook2pawn/node-treelib.git"
  },
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {},
  "readme": "treelib : create tree's as easy as .path('a/b/c')\n=================================================\n\n\tvar Treelib = require('treelib');\n\tvar tree = Treelib();\n\n\ttree.path('a/b/c').setValue('foobar');\n\n\t// creates a nested tree\n\t> { a : { b : { c : 'foobar' }}}\n\nmethods\n=======\n\n.path(path) \n-----------\npath takes a string or array to indicate a path, i.e.\n'a/b/c' refers to this path {a : {b : { c : '' }}}\n\nTreelib creates the path if it doesn't exist.\n\nexample: \n\n\ttree.path(['foo','bar','baz']).setValue('PERL!');\n\n\t> {foo: {bar: {baz: 'PERL!'}}}\n\n\ttree.path('foo/bar/bitter').setValue('Randal Schwartz');\n\n\t> {foo: {bar: {baz: 'PERL!', bitter: 'Randal Schwartz'}}}\n\n\n.setValue(val)\n--------------\nsetValue sets a value on the current path. The current path\nis set after .path is called.\n\nexample:\n\t\n\ttree.path('Music/The Smiths').setValue({price:'$12.99',SKU:'24142'})\n\n\t> {Music:{'The Smiths':{price:'$12.99',SKU:'24142'}}}\n\n.getValue(path)\n---------------\ngetValue takes a path in the form of a string or array and returns\nthe value there. If the path doesn't exist or there is no value set\nat that path, then it returns undefined\n\n\n.clearValue(path) \n----------------------------\nclearValue takes a path in the form of a string or array and clears the value at the end of that path, i.e. clears the leaf value.\n\n\n.checkPath(path) \n---------------------------\nexample:\n\ttree.path('a/b/c');\t\n\ttree.checkPath('a/b/cauliflower');\n\t\n\t// returns\n\n\t> {depth: 2, validPath: [ 'a', 'b' ] }\n\ncheckPath takes a path in the form of a string or array and returns how far it could walk down the tree.\n\n.show()\n-------\nShow the tree in the console.\n\n.tree()\n-------\nReturns the tree itself.\n\n.history()\n----------\nReturns the 50 most recent history of path creation and setValues\nexecutions.\n\nTESTING\n=======\n\ntesting results from ./test/test.js (nodeunit)\n\n\t$ nodeunit *\n\n\ttest.js\n\t✔ testBasics\n\t✔ testOverwrite\n\t✔ testBranching\n\t✔ testBranching2\n\t✔ testSetAndClearValues\n\n\tOK: 14 assertions (13ms)\n",
  "readmeFilename": "README.md",
  "_id": "treelib@0.0.4",
  "dist": {
    "shasum": "5859bdb679e18c4cc95682e056d732dd94313f8c"
  },
  "_from": "treelib@>=v0.0.4",
  "_resolved": "https://registry.npmjs.org/treelib/-/treelib-0.0.4.tgz"
}
