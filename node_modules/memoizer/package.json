{
  "author": {
    "name": "David Wee",
    "email": "rook2pawn@gmail.com",
    "url": "http://rook2pawn.com"
  },
  "name": "memoizer",
  "description": "memoization as easy as f = memo(g); f is now fully memoized!",
  "version": "0.0.5",
  "homepage": "https://github.com/rook2pawn/node-memoizer",
  "repository": {
    "type": "git",
    "url": "git://github.com/rook2pawn/node-memoizer.git"
  },
  "main": "index.js",
  "dependencies": {
    "treelib": ">=v0.0.4",
    "textual": ">=v0.0.1"
  },
  "devDependencies": {},
  "readme": "memoizer - f2 = memo(f); f2 is now fully memoized!\n==================================================\nFrom [Wikipedia] [wikipedia-memo]\n\t\nIn computing, memoization is an optimization technique used primarily to speed up computer programs by having function calls avoid repeating the calculation of results for previously-processed inputs.\n\nexample:\n\n\tvar memo = require('memoizer');\n\tvar f = function(x,y,z) { return ((x + 1) * y) + z };\n\t\n\tvar f2 = memo(f);\n\n\t// now f2 is fully memoized!\n\n\tf2(2,3,4);\n\t\n\t>> 13\n\n\tf2(2,3,4);\n\t\n\t>> 13 // but instantly from cache!\n\n[wikipedia-memo]: http://en.wikipedia.org/wiki/Memoization\n\nUsage\n=====\n\nmemo(your_function)\n-------------------\n\nmemo takes a function, memoizes it, and the return value is a fully-memoized version of your function, bam!\n\nmemoizer works with asynchronous functions too!!\n================================================\n\nWhat? in *your_function* simply declare a memo parameter as your last\nargument, and call memo.done(arguments,value) where *value* is the value\nyou want to store.\n\nExample:\n\t\n\tvar f = function(x,y,z,memo) {\n\t\tvar result = ((x+1) * y) + z;\n\t\tmemo.done(arguments, result);\n\t}\n\t\n\tf(2,3,4);\n\t\n\t// will store the value\n\t// after memo.done is called.\n\n\t// sometime later..time passes..\n\n\tf(2,3,4);\n\t\t\n\t// calculated instantly!\n\nEven Do Advanced Calculations with .then\n========================================\n\nExample:\n\n    var f = function(x) {\n        return x + 3;\n    };\n\n    var g = memo(f)\n            .then(function(last) {\n                return last * 4;\n            });\n\n    g(2);\n    \n    // (2 + 3) * 4 = 20\n",
  "readmeFilename": "README.md",
  "_id": "memoizer@0.0.5",
  "dist": {
    "shasum": "0d6ffa8fa28d6be998612a875dc8fa30e14a99c8"
  },
  "_from": "memoizer@",
  "_resolved": "https://registry.npmjs.org/memoizer/-/memoizer-0.0.5.tgz"
}
